# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, Konsta Vesterinen
# This file is distributed under the same license as the
# SQLAlchemy-Continuum package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy-Continuum 1.3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-27 11:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../schema.rst:2
msgid "Continuum Schema"
msgstr ""

#: ../../schema.rst:6
msgid "Version tables"
msgstr ""

#: ../../schema.rst:8
msgid ""
"By default SQLAlchemy-Continuum creates a version table for each "
"versioned entity table. The version tables are suffixed with '_version'. "
"So for example if you have two versioned tables 'article' and 'category',"
" SQLAlchemy-Continuum would create two version tables 'article_version' "
"and 'category_version'."
msgstr ""

#: ../../schema.rst:10
msgid "By default the version tables contain these columns:"
msgstr ""

#: ../../schema.rst:12
msgid ""
"id of the original entity (this can be more then one column in the case "
"of composite primary keys)"
msgstr ""

#: ../../schema.rst:13
msgid ""
"transaction_id - an integer that matches to the id number in the "
"transaction_log table."
msgstr ""

#: ../../schema.rst:14
msgid ""
"end_transaction_id - an integer that matches the next version record's "
"transaction_id. If this is the current version record then this field is "
"null."
msgstr ""

#: ../../schema.rst:15
msgid "operation_type - a small integer defining the type of the operation"
msgstr ""

#: ../../schema.rst:16
msgid "versioned fields from the original entity"
msgstr ""

#: ../../schema.rst:18
msgid ""
"If you are using :ref:`property-mod-tracker` Continuum also creates one "
"boolean field for each versioned field. By default these boolean fields "
"are suffixed with '_mod'."
msgstr ""

#: ../../schema.rst:20
msgid ""
"The primary key of each version table is the combination of parent "
"table's primary key + the transaction_id. This means there can be at most"
" one version table entry for a given entity instance at given "
"transaction."
msgstr ""

#: ../../schema.rst:23
msgid "Transaction tables"
msgstr ""

#: ../../schema.rst:25
msgid ""
"By default Continuum creates one transaction table called `transaction`. "
"Many continuum plugins also create additional tables for efficient "
"transaction storage. If you wish to query efficiently transactions "
"afterwards you should consider using some of these plugins."
msgstr ""

#: ../../schema.rst:28
msgid ""
"The transaction table only contains two fields by default: id and "
"issued_at."
msgstr ""

#: ../../schema.rst:31
msgid "Using vacuum"
msgstr ""

#: of sqlalchemy_continuum.vacuum:1
msgid ""
"When making structural changes to version tables (for example dropping "
"columns) there are sometimes situations where some old version records "
"become futile."
msgstr ""

#: of sqlalchemy_continuum.vacuum:5
msgid ""
"Vacuum deletes all futile version rows which had no changes compared to "
"previous version."
msgstr ""

#: of sqlalchemy_continuum.schema.update_end_tx_column
#: sqlalchemy_continuum.schema.update_property_mod_flags
#: sqlalchemy_continuum.vacuum
msgid "Parameters"
msgstr ""

#: of sqlalchemy_continuum.vacuum:18
msgid "SQLAlchemy session object"
msgstr ""

#: of sqlalchemy_continuum.vacuum:19
msgid "SQLAlchemy declarative model class"
msgstr ""

#: of sqlalchemy_continuum.vacuum:20
msgid "how many rows to process at a time"
msgstr ""

#: ../../schema.rst:38
msgid "Schema tools"
msgstr ""

#: of sqlalchemy_continuum.schema.update_end_tx_column:1
msgid ""
"Calculates end transaction columns and updates the version table with the"
" calculated values. This function can be used for migrating between "
"subquery versioning strategy and validity versioning strategy."
msgstr ""

#: of sqlalchemy_continuum.schema.update_end_tx_column:5
#: sqlalchemy_continuum.schema.update_property_mod_flags:5
msgid "SQLAlchemy table object"
msgstr ""

#: of sqlalchemy_continuum.schema.update_end_tx_column:6
#: sqlalchemy_continuum.schema.update_property_mod_flags:7
msgid "Name of the end transaction column"
msgstr ""

#: of sqlalchemy_continuum.schema.update_end_tx_column:7
#: sqlalchemy_continuum.schema.update_property_mod_flags:8
msgid "Transaction column name"
msgstr ""

#: of sqlalchemy_continuum.schema.update_end_tx_column:8
msgid ""
"Either SQLAlchemy Connection, Engine, Session or Alembic Operations "
"object. Basically this should be an object that can execute the queries "
"needed to update the end transaction column values.  If no object is "
"given then this function tries to use alembic.op for executing the "
"queries."
msgstr ""

#: of sqlalchemy_continuum.schema.update_end_tx_column:9
msgid ""
"Either SQLAlchemy Connection, Engine, Session or Alembic Operations "
"object. Basically this should be an object that can execute the queries "
"needed to update the end transaction column values."
msgstr ""

#: of sqlalchemy_continuum.schema.update_end_tx_column:13
#: sqlalchemy_continuum.schema.update_property_mod_flags:14
msgid ""
"If no object is given then this function tries to use alembic.op for "
"executing the queries."
msgstr ""

#: of sqlalchemy_continuum.schema.update_property_mod_flags:1
msgid ""
"Update property modification flags for given table and given columns. "
"This function can be used for migrating an existing schema to use "
"property mod flags (provided by PropertyModTracker plugin)."
msgstr ""

#: of sqlalchemy_continuum.schema.update_property_mod_flags:6
msgid "Modification tracking columns suffix"
msgstr ""

#: of sqlalchemy_continuum.schema.update_property_mod_flags:9
msgid ""
"Either SQLAlchemy Connection, Engine, Session or Alembic Operations "
"object. Basically this should be an object that can execute the queries "
"needed to update the property modification flags.  If no object is given "
"then this function tries to use alembic.op for executing the queries."
msgstr ""

#: of sqlalchemy_continuum.schema.update_property_mod_flags:10
msgid ""
"Either SQLAlchemy Connection, Engine, Session or Alembic Operations "
"object. Basically this should be an object that can execute the queries "
"needed to update the property modification flags."
msgstr ""

