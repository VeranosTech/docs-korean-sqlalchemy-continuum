# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, Konsta Vesterinen
# This file is distributed under the same license as the
# SQLAlchemy-Continuum package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy-Continuum 1.3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-04-24 16:03+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../plugins.rst:2
msgid "Plugins"
msgstr ""

#: ../../plugins.rst:5
msgid "Using plugins"
msgstr ""

#: ../../plugins.rst:24
msgid "Activity"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:1
msgid ""
"The ActivityPlugin is the most powerful plugin for tracking changes of "
"individual entities. If you use ActivityPlugin you probably don't need to"
" use TransactionChanges nor TransactionMeta plugins."
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:5
msgid "You can initalize the ActivityPlugin by adding it to versioning manager."
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:14
msgid ""
"ActivityPlugin uses single database table for tracking activities. This "
"table follows the data structure in `activity stream specification`_, but"
" it comes with a nice twist:"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:19
msgid "Column"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:19
msgid "Type"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:19
msgid "Description"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:21
msgid "id"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:21
#: sqlalchemy_continuum.plugins.activity:24
#: sqlalchemy_continuum.plugins.activity:26
#: sqlalchemy_continuum.plugins.activity:30
#: sqlalchemy_continuum.plugins.activity:35
#: sqlalchemy_continuum.plugins.activity:39
msgid "BigInteger"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:21
msgid "The primary key of the activity"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:22
msgid "verb"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:22
#: sqlalchemy_continuum.plugins.activity:28
#: sqlalchemy_continuum.plugins.activity:37
msgid "Unicode"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:22
msgid "Verb defines the action of the activity"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:23
msgid "data"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:23
msgid "JSON"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:23
msgid "Additional data for the activity in JSON format"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:24
#: sqlalchemy_continuum.plugins.transaction_changes:17
msgid "transaction_id"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:24
msgid "The transaction this activity was associated with"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:26
msgid "object_id"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:26
msgid ""
"The primary key of the object. Object can be any entity which has an "
"integer as primary key."
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:28
msgid "object_type"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:28
msgid "The type of the object (class name as string)"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:30
msgid "object_tx_id"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:30
msgid ""
"The last transaction_id associated with the object. This is used for "
"efficiently fetching the object version associated with this activity."
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:35
msgid "target_id"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:35
msgid ""
"The primary key of the target. Target can be any entity which has an "
"integer as primary key."
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:37
msgid "target_type"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:37
msgid "The of the target (class name as string)"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:39
msgid "target_tx_id"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:39
msgid "The last transaction_id associated with the target."
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:44
msgid ""
"Each Activity has relationships to actor, object and target but it also "
"holds information about the associated transaction and about the last "
"associated transactions with the target and object. This allows each "
"activity to also have object_version and target_version relationships for"
" introspecting what those objects and targets were in given point in "
"time. All these relationship properties use `generic relationships`_ of "
"the SQLAlchemy-Utils package."
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:52
msgid "Limitations"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:54
msgid ""
"Currently all changes to parent models must be flushed or committed "
"before creating activities. This is due to a fact that there is still no "
"dependency processors for generic relationships. So when you create "
"activities and assign objects / targets for those please remember to "
"flush the session before creating an activity::"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:69
msgid ""
"Targets and objects of given activity must have an integer primary key "
"column id."
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:74
msgid "Create activities"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:77
msgid ""
"Once your models have been configured you can get the Activity model from"
" the ActivityPlugin class with activity_cls property::"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:84
msgid ""
"Now let's say we have model called Article and Category. Each Article has"
" one Category. Activities should be created along with the changes you "
"make on these models. ::"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:96
msgid "Current transaction gets automatically assigned to activity object::"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:102
msgid "Update activities"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:104
msgid ""
"The object property of the Activity object holds the current object and "
"the object_version holds the object version at the time when the activity"
" was created. ::"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:122
msgid "Delete activities"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:125
msgid ""
"The version properties are especially useful for delete activities. Once "
"the activity is fetched from the database the object is no longer "
"available ( since its deleted), hence the only way we could show some "
"information about the object the user deleted is by accessing the "
"object_version property."
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:143
msgid "Local version histories using targets"
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:145
msgid ""
"The target property of the Activity model offers a way of tracking "
"changes of given related object. In the example below we create a new "
"activity when adding a category for article and then mark the article as "
"the target of this activity."
msgstr ""

#: of sqlalchemy_continuum.plugins.activity:166
msgid ""
"Now if we wanted to find all the changes that affected given article we "
"could do so by searching through all the activities where either the "
"object or target is the given article."
msgstr ""

#: ../../plugins.rst:30
msgid "Flask"
msgstr ""

#: of sqlalchemy_continuum.plugins.flask:1
msgid ""
"FlaskPlugin offers way of integrating Flask framework with SQLAlchemy-"
"Continuum. Flask-Plugin adds two columns for Transaction model, namely "
"`user_id` and `remote_addr`."
msgstr ""

#: of sqlalchemy_continuum.plugins.flask:5
msgid ""
"These columns are automatically populated when transaction object is "
"created. The `remote_addr` column is populated with the value of the "
"remote address that made current request. The `user_id` column is "
"populated with the id of the current_user object."
msgstr ""

#: ../../plugins.rst:38
msgid "PropertyModTracker"
msgstr ""

#: of sqlalchemy_continuum.plugins.property_mod_tracker:1
msgid ""
"The PropertyModTrackerPlugin offers a way of efficiently tracking "
"individual property modifications. With PropertyModTrackerPlugin you can "
"make efficient queries such as:"
msgstr ""

#: of sqlalchemy_continuum.plugins.property_mod_tracker:5
msgid ""
"Find all versions of model X where user updated the property A or "
"property B."
msgstr ""

#: of sqlalchemy_continuum.plugins.property_mod_tracker:7
msgid "Find all versions of model X where user didn't update property A."
msgstr ""

#: of sqlalchemy_continuum.plugins.property_mod_tracker:9
msgid ""
"PropertyModTrackerPlugin adds separate modified tracking column for each "
"versioned column. So for example if you have versioned model called "
"Article with columns `name` and `content`, this plugin would add two "
"additional boolean columns `name_mod` and `content_mod` for the version "
"model. When user commits transactions the plugin automatically updates "
"these boolean columns."
msgstr ""

#: ../../plugins.rst:44
msgid "TransactionChanges"
msgstr ""

#: of sqlalchemy_continuum.plugins.transaction_changes:1
msgid ""
"TransactionChanges provides way of keeping track efficiently which "
"declarative models were changed in given transaction. This can be useful "
"when transactions need to be queried afterwards for problems such as:"
msgstr ""

#: of sqlalchemy_continuum.plugins.transaction_changes:5
msgid "Find all transactions which affected `User` model."
msgstr ""

#: of sqlalchemy_continuum.plugins.transaction_changes:7
msgid "Find all transactions which didn't affect models `Entity` and `Event`."
msgstr ""

#: of sqlalchemy_continuum.plugins.transaction_changes:9
msgid ""
"The plugin works in two ways. On class instrumentation phase this plugin "
"creates a special transaction model called `TransactionChanges`. This "
"model is associated with table called `transaction_changes`, which has "
"only only two fields: transaction_id and entity_name. If for example "
"transaction consisted of saving 5 new User entities and 1 Article entity,"
" two new rows would be inserted into transaction_changes table."
msgstr ""

#: of sqlalchemy_continuum.plugins.transaction_changes:17
msgid "entity_name"
msgstr ""

#: of sqlalchemy_continuum.plugins.transaction_changes:19
#: sqlalchemy_continuum.plugins.transaction_changes:20
msgid "233678"
msgstr ""

#: of sqlalchemy_continuum.plugins.transaction_changes:19
msgid "User"
msgstr ""

#: of sqlalchemy_continuum.plugins.transaction_changes:20
msgid "Article"
msgstr ""

#: ../../plugins.rst:50
msgid "TransactionMeta"
msgstr ""

#: of sqlalchemy_continuum.plugins.transaction_meta:1
msgid ""
"TransactionMetaPlugin offers a way of saving key-value data for "
"transations. You can use the plugin in same way as other plugins::"
msgstr ""

#: of sqlalchemy_continuum.plugins.transaction_meta:10
msgid ""
"TransactionMetaPlugin creates a simple model called TransactionMeta. This"
" class has three columns: transaction_id, key and value. TransactionMeta "
"plugin also creates an association proxy between TransactionMeta and "
"Transaction classes for easy dictionary based access of key-value pairs."
msgstr ""

#: of sqlalchemy_continuum.plugins.transaction_meta:15
msgid ""
"You can easily 'tag' transactions with certain key value pairs by giving "
"these keys and values to the meta property of Transaction class."
msgstr ""

