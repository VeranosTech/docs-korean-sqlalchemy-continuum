# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, Konsta Vesterinen
# This file is distributed under the same license as the
# SQLAlchemy-Continuum package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SQLAlchemy-Continuum 1.3.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-27 11:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../version_objects.rst:2
msgid "Version objects"
msgstr "버전 객체"

#: ../../version_objects.rst:6
msgid "Operation types"
msgstr "연산 유형"

#: ../../version_objects.rst:8
msgid ""
"When changing entities and committing results into database Continuum "
"saves the used operations (INSERT, UPDATE or DELETE) into version "
"entities. The operation types are stored by default to a small integer "
"field named 'operation_type'. Class called 'Operation' holds convenient "
"constants for these values as shown below:"
msgstr ""
"엔티티를 변경하고 그 결과를 데이터베이스 커밋하면 Continuum은 버전 엔티티에 "
"어떤 연산(INSERT, UPDATE, DELETE)을 했는가도 기록한다. "
"연산 유형은 'operation_type'\ 이라는 이름의 정수형 자료로 기록된다. "
"'Operation' 클래스는 이 값에 대한 상수형을 가지고 있다.:"

#: ../../version_objects.rst:34
msgid "Version traversal"
msgstr "버전 추적"

#: ../../version_objects.rst:54
msgid "Changeset"
msgstr "체인지셋"

#: ../../version_objects.rst:56
msgid ""
"Continuum provides easy way for getting the changeset of given version "
"object. Each version contains a changeset property which holds a dict of "
"changed fields in that version."
msgstr ""
"컨티눔에서는 특정 버전 객체의 체인지셋을 쉽게 얻을 수 있다. 각 버전은 그 버전에서 바뀐 필드의 "
"딕셔너리를 가진 changeset이라는 속성이 있다."

#: ../../version_objects.rst:92
msgid ""
"SQLAlchemy-Continuum also provides a utility function called changeset. "
"With this function you can easily check the changeset of given object in "
"current transaction."
msgstr ""

#: ../../version_objects.rst:109
msgid "Version relationships"
msgstr ""

#: ../../version_objects.rst:111
msgid ""
"Each version object reflects all parent object relationships. You can "
"think version object relations as 'relations of parent object in given "
"point in time'."
msgstr ""

#: ../../version_objects.rst:113
msgid ""
"Lets say you have two models: Article and Category. Each Article has one "
"Category. In the following example we first add article and category "
"objects into database."
msgstr ""

#: ../../version_objects.rst:115
msgid ""
"Continuum saves new ArticleVersion and CategoryVersion records in the "
"background. After that we update the created article entity to use "
"another category. Continuum creates new version objects accordingly."
msgstr ""

#: ../../version_objects.rst:117
msgid "Lastly we check the category relations of different article versions."
msgstr ""

#: ../../version_objects.rst:139
msgid ""
"The logic how SQLAlchemy-Continuum builds these relationships is within "
"the RelationshipBuilder class."
msgstr ""

#: ../../version_objects.rst:143
msgid "Relationships to non-versioned classes"
msgstr ""

#: ../../version_objects.rst:145
msgid ""
"Let's take previous example of Articles and Categories. Now consider that"
" only Article model is versioned:"
msgstr ""

#: ../../version_objects.rst:171
msgid ""
"Here Article versions will still reflect the relationships of Article "
"model but they will simply return Category objects instead of "
"CategoryVersion objects:"
msgstr ""

#: ../../version_objects.rst:194
msgid "Dynamic relationships"
msgstr ""

#: ../../version_objects.rst:196
msgid ""
"If the parent class has a dynamic relationship it will be reflected as a "
"property which returns a query in the associated version class."
msgstr ""

